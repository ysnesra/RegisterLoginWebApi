Register ve Login Formu Projesi

CQRS tasarýmý ile MediatR kütüphanesini kullandýðým WebAPI projesidir.
DDD(Domain Dream Development) Tekniði ile Onion Architecture mimarisi kullanýlmýþtýr.
IdentityServer yapýsý ve Hangfire kullanýlarak Authenticate iþlemi yapýlmýþtýr.

**************************
Core.Security -> Identity klasörüne-> AppRole ve AppUser entityleri oluþturuldu.
    AppRole: IdentityRole Identity sýnýfýndan inherit edildi
    AppUser: IdentityUser Identity sýnýfýndan inherit edildi

DevsProject -> Persistence -> Contexts içine -> AppIdentityDbContext tanýmlandý.

PersistenceServiceRegistration.cs extension clasýna -> AddIdentityServerConfig servisi oluþturularak configuration yapýldý,database baðlantýs verildi.
Bu servis program.cs'ye de tanýmlandý.

**************************
###  Kullanýcý Register olma:  ### 

Application-> Auths-> RegisterCommand oluþturuldu.
IdentityServer ýn UserManager servisi kullanýlarak kullanýcý iþlemleri yapýldý.
!Kullanýcý Üye olurken Token oluþturmaya gerek yok 

Exception hatalarýný özelleþtirildi:
Core.CrossCuttingConcerns -> Exceptions klasöründe 
RegisterFailedException, EmailCanNotBeDuplicated... Exception classlarýyla hata ile ilgili açýklama mesaj yazýldý.
AuthController'da Register operasyonu oluþturuldu.


**************************
###  OTP(Doðrulama Kodu) ile Login olma: //OTP üretildi  ### 

Core.Security->Entities -> için "OtpAuthenticator" entitysi ve "TwoFactorAuthenticationTransaction" entitysi oluþturuldu.
Ýkiaþamalý doðrulama yapýlacaðýndan; AppUser(1)-TwoFactorAuthenticationTransaction(N) iliþki oluþturuldu.
Migration yapýldý
Bu entitylerin veritabaný iþlemleri için 
->Application içinde Services->Repositories->ITwoFactorAuthenticationRepository interfacei oluþturuldu
->Persistence içinde Repositories içine->TwoFactorAuthenticationRepository oluþturuldu.

Core.Security->Dtos -> "OneTimePasswordDto" oluþturuldu. "OtpLoginCommand" de bu OneTimePasswordDtosu dönülür
OtpLoginCommand'de;
   OTP üretilen command
   TwoFactorAuthenticationRepository injecte edilerek
          -> CreateOpt fonksiyonu ile Otp(OneTimePassword) üretildi.
          -> VerifyOtp fonksiyonu ile Otp Onaylandý mý kontrolü yapýldý. Bu fonk. Login olurken kullanýlýr.


OnetimePasswordü random üretmek için; RandomGenerator(Persistence->Utilities->Toolkit içinde) static classý oluþturuldu

**************************
###  Login olma:  ### 

Sisteme giriþ - Login olma:
Application-> Auths-> LoginCommand oluþturuldu. 
   OneTimePasswordDto tipinde dönecek.
   OneTimePasswordId ve OneTimePassword bilgileri ile Login olundu.//20,523470 gibi
   JwtToken üretildi

**************************
###  Otomatik Mail Gönderme için:  ### 
Infrastructure ->Helpers-> EmailToInformation classýnda 
    Gönderilecek mailin kalýbý oluþturuldu
    EmailSetting() private metotu oluþturulup -> SendEmail metotunun içinde çaðrýldý
    EmailSetting() metotunda appsettingden aldýðým deðerleri EmailVerifyModel e aktardým





